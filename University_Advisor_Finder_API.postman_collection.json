{
  "info": {
    "name": "University Advisor Finder API",
    "description": "Comprehensive API testing collection for the University Advisor Finder application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. API Connectivity Test",
      "item": [
        {
          "name": "API Connectivity Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/lecturers/public",
              "host": ["{{baseUrl}}"],
              "path": ["api", "lecturers", "public"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test('API is responding', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "2. Research Data",
      "item": [
        {
          "name": "Get All Research Categories",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/research/categories",
              "host": ["{{baseUrl}}"],
              "path": ["api", "research", "categories"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Categories have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.length > 0) {",
                  "        pm.expect(responseJson[0]).to.have.property('id');",
                  "        pm.expect(responseJson[0]).to.have.property('name');",
                  "        pm.expect(responseJson[0]).to.have.property('description');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get All Research Interests",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/research/interests",
              "host": ["{{baseUrl}}"],
              "path": ["api", "research", "interests"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Interests have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.length > 0) {",
                  "        pm.expect(responseJson[0]).to.have.property('id');",
                  "        pm.expect(responseJson[0]).to.have.property('name');",
                  "        pm.expect(responseJson[0]).to.have.property('category');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "3. Lecturer Endpoints",
      "item": [
        {
          "name": "Get All Lecturers (Public)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/lecturers/public",
              "host": ["{{baseUrl}}"],
              "path": ["api", "lecturers", "public"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test('Response contains lecturers array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Lecturers have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.length > 0) {",
                  "        const lecturer = responseJson[0];",
                  "        pm.expect(lecturer).to.have.property('id');",
                  "        pm.expect(lecturer).to.have.property('firstName');",
                  "        pm.expect(lecturer).to.have.property('lastName');",
                  "        pm.expect(lecturer).to.have.property('department');",
                  "        pm.expect(lecturer).to.have.property('researchInterests');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Search Lecturers by Keyword",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/lecturers/search?keyword=machine learning",
              "host": ["{{baseUrl}}"],
              "path": ["api", "lecturers", "search"],
              "query": [
                {
                  "key": "keyword",
                  "value": "machine learning"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is JSON array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Search results are relevant', function () {",
                  "    const responseJson = pm.response.json();",
                  "    // Test that results contain the search keyword in some field",
                  "    if (responseJson.length > 0) {",
                  "        const lecturer = responseJson[0];",
                  "        const searchKeyword = 'machine learning';",
                  "        const hasKeyword = JSON.stringify(lecturer).toLowerCase().includes(searchKeyword.toLowerCase());",
                  "        pm.expect(hasKeyword).to.be.true;",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Lecturers by Department",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/lecturers/by-department?department=Computer Science",
              "host": ["{{baseUrl}}"],
              "path": ["api", "lecturers", "by-department"],
              "query": [
                {
                  "key": "department",
                  "value": "Computer Science"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All lecturers belong to specified department', function () {",
                  "    const responseJson = pm.response.json();",
                  "    responseJson.forEach(lecturer => {",
                  "        pm.expect(lecturer.department).to.equal('Computer Science');",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Lecturers by Category",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/lecturers/by-category/1",
              "host": ["{{baseUrl}}"],
              "path": ["api", "lecturers", "by-category", "1"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is JSON array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "4. Student Registration",
      "item": [
        {
          "name": "Register New Student (Valid Data)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe.{{$randomInt}}@university.edu\",\n  \"phone\": \"+1234567890\",\n  \"studentId\": \"STU{{$randomInt}}\",\n  \"program\": \"Computer Science\",\n  \"yearOfStudy\": \"Third Year\",\n  \"interests\": \"Machine Learning, Web Development\",\n  \"password\": \"SecurePassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/students/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "students", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains success message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "    pm.expect(responseJson.message).to.include('success');",
                  "});",
                  "",
                  "pm.test('Response contains student ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('studentId');",
                  "    pm.expect(responseJson.studentId).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register Student (Duplicate Email)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Jane\",\n  \"lastName\": \"Smith\",\n  \"email\": \"john.doe.duplicate@university.edu\",\n  \"phone\": \"+1234567891\",\n  \"studentId\": \"STU12346\",\n  \"program\": \"Data Science\",\n  \"yearOfStudy\": \"Second Year\",\n  \"interests\": \"Data Analysis, Statistics\",\n  \"password\": \"AnotherPassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/students/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "students", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 for duplicate email', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response contains error message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Register Student (Invalid Password)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test.user.{{$randomInt}}@university.edu\",\n  \"phone\": \"+1234567892\",\n  \"studentId\": \"STU{{$randomInt}}\",\n  \"program\": \"Engineering\",\n  \"yearOfStudy\": \"First Year\",\n  \"interests\": \"Robotics\",\n  \"password\": \"123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/students/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "students", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 for invalid password', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response contains validation error', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('error');",
                  "    // Check if error message mentions password length",
                  "    pm.expect(responseJson.error.toLowerCase()).to.include('password');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Check Email Exists",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/students/check-email?email=test@university.edu",
              "host": ["{{baseUrl}}"],
              "path": ["api", "students", "check-email"],
              "query": [
                {
                  "key": "email",
                  "value": "test@university.edu"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is boolean', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.a('boolean');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "5. Error Handling Tests",
      "item": [
        {
          "name": "Invalid Endpoint (404 Test)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/invalid-endpoint",
              "host": ["{{baseUrl}}"],
              "path": ["api", "invalid-endpoint"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404 for invalid endpoint', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Missing Required Parameters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/lecturers/search",
              "host": ["{{baseUrl}}"],
              "path": ["api", "lecturers", "search"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 for missing parameters', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Running test for: ' + pm.info.requestName);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Content-Type header is present', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.exist;",
          "});",
          "",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});"
        ]
      }
    }
  ]
}